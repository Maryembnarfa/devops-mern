{"ast":null,"code":"import { group, ascending, maxIndex } from '@antv/vendor/d3-array';\nimport { defined } from '../../utils/helper';\nimport { indexOf } from '../../utils/array';\nimport { columnOf } from './helper';\nexport function createGroups(groupBy, I, mark) {\n  const {\n    encode\n  } = mark;\n  if (groupBy === null) return [I];\n  const G = normalizeGroupBy(groupBy).map(k => {\n    var _a;\n    return [k, (_a = columnOf(encode, k)) === null || _a === void 0 ? void 0 : _a[0]];\n  }).filter(_ref => {\n    let [, column] = _ref;\n    return defined(column);\n  });\n  const key = i => G.map(_ref2 => {\n    let [, V] = _ref2;\n    return V[i];\n  }).join('-');\n  return Array.from(group(I, key).values());\n}\nexport function normalizeComparator(order) {\n  if (Array.isArray(order)) return createFieldsOrder(order);\n  if (typeof order === 'function') return createFunctionOrder(order);\n  if (order === 'series') return createSeriesOrder;\n  if (order === 'value') return createValueOrder;\n  if (order === 'sum') return createSumOrder;\n  if (order === 'maxIndex') return createMaxIndexOrder;\n  return null;\n}\nexport function applyOrder(groups, comparator) {\n  for (const group of groups) {\n    group.sort(comparator);\n  }\n}\nexport function domainOf(value, scale) {\n  return (scale === null || scale === void 0 ? void 0 : scale.domain) || Array.from(new Set(value));\n}\nfunction normalizeGroupBy(groupBy) {\n  if (Array.isArray(groupBy)) return groupBy;\n  return [groupBy];\n}\nfunction createSeriesOrder(data, Y, S) {\n  return ascendingComparator(i => S[i]);\n}\nfunction createFunctionOrder(order) {\n  return (data, Y, S) => {\n    return ascendingComparator(i => order(data[i]));\n  };\n}\nfunction createFieldsOrder(order) {\n  return (data, Y, S) => {\n    return (i, j) => order.reduce((eq, f) => eq !== 0 ? eq : ascending(data[i][f], data[j][f]), 0);\n  };\n}\nfunction createValueOrder(data, Y, S) {\n  return ascendingComparator(i => Y[i]);\n}\nfunction createSumOrder(data, Y, S) {\n  const I = indexOf(data);\n  const groups = Array.from(group(I, i => S[+i]).entries());\n  const seriesSum = new Map(groups.map(_ref3 => {\n    let [k, GI] = _ref3;\n    return [k, GI.reduce((s, i) => s + +Y[i])];\n  }));\n  return ascendingComparator(i => seriesSum.get(S[i]));\n}\nfunction createMaxIndexOrder(data, Y, S) {\n  const I = indexOf(data);\n  const groups = Array.from(group(I, i => S[+i]).entries());\n  const seriesMaxIndex = new Map(groups.map(_ref4 => {\n    let [k, GI] = _ref4;\n    return [k, maxIndex(GI, i => Y[i])];\n  }));\n  return ascendingComparator(i => seriesMaxIndex.get(S[i]));\n}\nfunction ascendingComparator(order) {\n  return (i, j) => ascending(order(i), order(j));\n}","map":{"version":3,"names":["group","ascending","maxIndex","defined","indexOf","columnOf","createGroups","groupBy","I","mark","encode","G","normalizeGroupBy","map","k","_a","filter","_ref","column","key","i","_ref2","V","join","Array","from","values","normalizeComparator","order","isArray","createFieldsOrder","createFunctionOrder","createSeriesOrder","createValueOrder","createSumOrder","createMaxIndexOrder","applyOrder","groups","comparator","sort","domainOf","value","scale","domain","Set","data","Y","S","ascendingComparator","j","reduce","eq","f","entries","seriesSum","Map","_ref3","GI","s","get","seriesMaxIndex","_ref4"],"sources":["transform/utils/order.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}