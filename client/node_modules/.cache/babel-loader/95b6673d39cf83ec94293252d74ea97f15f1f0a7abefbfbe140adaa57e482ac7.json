{"ast":null,"code":"import { DensityShape } from '../shape';\nimport { MaybeZeroY1, MaybeZeroX } from '../transform';\nimport { baseGeometryChannels, basePostInference, basePreInference, tooltip1d } from './utils';\nconst shape = {\n  density: DensityShape\n};\nexport const Density = () => {\n  return (index, scale, value, coordinate) => {\n    const {\n      x: X,\n      series: S\n    } = value;\n    const Yn = Object.entries(value).filter(_ref => {\n      let [key] = _ref;\n      return key.startsWith('y');\n    }).map(_ref2 => {\n      let [, value] = _ref2;\n      return value;\n    });\n    const SZn = Object.entries(value).filter(_ref3 => {\n      let [key] = _ref3;\n      return key.startsWith('size');\n    }).map(_ref4 => {\n      let [, value] = _ref4;\n      return value;\n    });\n    // Because x and y channel is not strictly required in Line.props,\n    // it should throw error with empty x or y channels.\n    if (X === undefined || Yn === undefined || SZn === undefined) {\n      throw new Error('Missing encode for x or y or size channel.');\n    }\n    // Calc width for each box.\n    // The scales for x and series channels must be band scale.\n    const xScale = scale.x;\n    const series = scale.series;\n    const P = Array.from(index, i => {\n      const groupWidth = xScale.getBandWidth(xScale.invert(+X[i]));\n      const ratio = series ? series.getBandWidth(series.invert(+(S === null || S === void 0 ? void 0 : S[i]))) : 1;\n      const width = groupWidth * ratio;\n      const offset = (+(S === null || S === void 0 ? void 0 : S[i]) || 0) * groupWidth;\n      const x = +X[i] + offset + width / 2;\n      const PN = [...Yn.map((_, idx) => [x + +SZn[idx][i] / index.length, +Yn[idx][i]]), ...Yn.map((_, idx) => [x - +SZn[idx][i] / index.length, +Yn[idx][i]]).reverse() // left\n      ];\n      return PN.map(p => coordinate.map(p));\n    });\n    return [index, P];\n  };\n};\nDensity.props = {\n  defaultShape: 'density',\n  defaultLabelShape: 'label',\n  composite: false,\n  shape,\n  channels: [...baseGeometryChannels({\n    shapes: Object.keys(shape)\n  }), {\n    name: 'x',\n    scale: 'band',\n    required: true\n  }, {\n    name: 'y',\n    required: true\n  }, {\n    name: 'size',\n    required: true\n  }, {\n    name: 'series',\n    scale: 'band'\n  }, {\n    name: 'size',\n    required: true,\n    scale: 'identity'\n  }],\n  preInference: [...basePreInference(), {\n    type: MaybeZeroY1\n  }, {\n    type: MaybeZeroX\n  }],\n  postInference: [...basePostInference(), ...tooltip1d()],\n  interaction: {\n    shareTooltip: true\n  }\n};","map":{"version":3,"names":["DensityShape","MaybeZeroY1","MaybeZeroX","baseGeometryChannels","basePostInference","basePreInference","tooltip1d","shape","density","Density","index","scale","value","coordinate","x","X","series","S","Yn","Object","entries","filter","_ref","key","startsWith","map","_ref2","SZn","_ref3","_ref4","undefined","Error","xScale","P","Array","from","i","groupWidth","getBandWidth","invert","ratio","width","offset","PN","_","idx","length","reverse","p","props","defaultShape","defaultLabelShape","composite","channels","shapes","keys","name","required","preInference","type","postInference","interaction","shareTooltip"],"sources":["mark/density.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}