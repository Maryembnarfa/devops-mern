{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { deepMix } from '@antv/util';\nimport { mean, deviation, median, sum, max, min } from '@antv/vendor/d3-array';\nimport { isUnset } from '../utils/helper';\nimport { column, columnOf } from './utils/helper';\nimport { createGroups } from './utils/order';\nfunction normalizeBasis(basis) {\n  if (typeof basis === 'function') return basis;\n  const registry = {\n    min: (I, Y) => min(I, i => Y[+i]),\n    max: (I, Y) => max(I, i => Y[+i]),\n    first: (I, Y) => Y[I[0]],\n    last: (I, Y) => Y[I[I.length - 1]],\n    mean: (I, Y) => mean(I, i => Y[+i]),\n    median: (I, Y) => median(I, i => Y[+i]),\n    sum: (I, Y) => sum(I, i => Y[+i]),\n    deviation: (I, Y) => deviation(I, i => Y[+i])\n  };\n  return registry[basis] || max;\n}\n/**\n * Group marks into series by specified channels, and then transform\n * each series's value, say to transform them relative to some basis\n * to apply a moving average.\n */\nexport const NormalizeY = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    groupBy = 'x',\n    basis = 'max'\n  } = options;\n  return (I, mark) => {\n    const {\n      encode,\n      tooltip\n    } = mark;\n    const {\n        x\n      } = encode,\n      rest = __rest(encode, [\"x\"]);\n    // Extract and create new channels starts with y, such as y, y1.\n    const Yn = Object.entries(rest).filter(_ref => {\n      let [k] = _ref;\n      return k.startsWith('y');\n    }).map(_ref2 => {\n      let [k] = _ref2;\n      return [k, columnOf(encode, k)[0]];\n    });\n    const [, Y] = Yn.find(_ref3 => {\n      let [k] = _ref3;\n      return k === 'y';\n    });\n    const newYn = Yn.map(_ref4 => {\n      let [k] = _ref4;\n      return [k, new Array(I.length)];\n    });\n    // Group marks into series by specified keys.\n    const groups = createGroups(groupBy, I, mark);\n    // Transform y channels for each group based on basis.\n    const basisFunction = normalizeBasis(basis);\n    for (const I of groups) {\n      // Compute basis only base on y.\n      const basisValue = basisFunction(I, Y);\n      for (const i of I) {\n        for (let j = 0; j < Yn.length; j++) {\n          const [, V] = Yn[j];\n          const [, newV] = newYn[j];\n          newV[i] = +V[i] / basisValue;\n        }\n      }\n    }\n    const specifiedTooltip = isUnset(tooltip) || (tooltip === null || tooltip === void 0 ? void 0 : tooltip.items) && (tooltip === null || tooltip === void 0 ? void 0 : tooltip.items.length) !== 0;\n    return [I, deepMix({}, mark, Object.assign({\n      encode: Object.fromEntries(newYn.map(_ref5 => {\n        let [k, v] = _ref5;\n        return [k, column(v, columnOf(encode, k)[1])];\n      }))\n    }, !specifiedTooltip && encode.y0 && {\n      tooltip: {\n        items: [{\n          channel: 'y0'\n        }]\n      }\n    }))];\n  };\n};\nNormalizeY.props = {};","map":{"version":3,"names":["deepMix","mean","deviation","median","sum","max","min","isUnset","column","columnOf","createGroups","normalizeBasis","basis","registry","I","Y","i","first","last","length","NormalizeY","options","arguments","undefined","groupBy","mark","encode","tooltip","x","rest","__rest","Yn","Object","entries","filter","_ref","k","startsWith","map","_ref2","find","_ref3","newYn","_ref4","Array","groups","basisFunction","basisValue","j","V","newV","specifiedTooltip","items","assign","fromEntries","_ref5","v","y0","channel","props"],"sources":["transform/normalizeY.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}