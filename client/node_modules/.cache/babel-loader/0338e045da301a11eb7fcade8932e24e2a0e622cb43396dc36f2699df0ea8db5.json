{"ast":null,"code":"export function isTranspose(coordinate) {\n  const {\n    transformations\n  } = coordinate.getOptions();\n  const transposes = transformations.map(_ref => {\n    let [type] = _ref;\n    return type;\n  }).filter(type => type === 'transpose');\n  return transposes.length % 2 !== 0;\n}\nexport function isPolar(coordinate) {\n  const {\n    transformations\n  } = coordinate.getOptions();\n  return transformations.some(_ref2 => {\n    let [type] = _ref2;\n    return type === 'polar';\n  });\n}\nexport function isRadial(coordinate) {\n  const {\n    transformations\n  } = coordinate.getOptions();\n  return (\n    // distinguish radial from theta.\n    transformations.some(_ref3 => {\n      let [type] = _ref3;\n      return type === 'reflect';\n    }) && transformations.some(_ref4 => {\n      let [type] = _ref4;\n      return type.startsWith('transpose');\n    })\n  );\n}\nexport function isHelix(coordinate) {\n  const {\n    transformations\n  } = coordinate.getOptions();\n  return transformations.some(_ref5 => {\n    let [type] = _ref5;\n    return type === 'helix';\n  });\n}\nexport function isParallel(coordinate) {\n  const {\n    transformations\n  } = coordinate.getOptions();\n  return transformations.some(_ref6 => {\n    let [type] = _ref6;\n    return type === 'parallel';\n  });\n}\nexport function isFisheye(coordinate) {\n  const {\n    transformations\n  } = coordinate.getOptions();\n  return transformations.some(_ref7 => {\n    let [type] = _ref7;\n    return type === 'fisheye';\n  });\n}\nexport function isRadar(coordinate) {\n  return isParallel(coordinate) && isPolar(coordinate);\n}\nexport function isCircular(coordinate) {\n  return isHelix(coordinate) || isPolar(coordinate);\n}\nexport function isTheta(coordinate) {\n  return isPolar(coordinate) && isTranspose(coordinate);\n}\nexport function isNonCartesian(coordinate) {\n  return isPolar(coordinate) || isParallel(coordinate) || isRadial(coordinate) || isTheta(coordinate);\n}\nexport function getRadius(coordinate) {\n  if (isCircular(coordinate)) {\n    const [width, height] = coordinate.getSize();\n    const polar = coordinate.getOptions().transformations.find(t => t[0] === 'polar');\n    // coordinate.size * outerRadius.\n    if (polar) return Math.max(width, height) / 2 * polar[4];\n  }\n  return 0;\n}\nexport function radiusOf(coordinate) {\n  const {\n    transformations\n  } = coordinate.getOptions();\n  const [,,, innerRadius, outerRadius] = transformations.find(d => d[0] === 'polar');\n  return [+innerRadius, +outerRadius];\n}\nexport function angleOf(coordinate) {\n  let isRadius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const {\n    transformations\n  } = coordinate.getOptions();\n  const [, startAngle, endAngle] = transformations.find(d => d[0] === 'polar');\n  return isRadius ? [+startAngle * 180 / Math.PI, +endAngle * 180 / Math.PI] : [startAngle, endAngle];\n}\nexport function getTransformOptions(coordinate, type) {\n  const {\n    transformations\n  } = coordinate.getOptions();\n  const [, ...args] = transformations.find(d => d[0] === type);\n  return args;\n}","map":{"version":3,"names":["isTranspose","coordinate","transformations","getOptions","transposes","map","_ref","type","filter","length","isPolar","some","_ref2","isRadial","_ref3","_ref4","startsWith","isHelix","_ref5","isParallel","_ref6","isFisheye","_ref7","isRadar","isCircular","isTheta","isNonCartesian","getRadius","width","height","getSize","polar","find","t","Math","max","radiusOf","innerRadius","outerRadius","d","angleOf","isRadius","arguments","undefined","startAngle","endAngle","PI","getTransformOptions","args"],"sources":["utils/coordinate.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}