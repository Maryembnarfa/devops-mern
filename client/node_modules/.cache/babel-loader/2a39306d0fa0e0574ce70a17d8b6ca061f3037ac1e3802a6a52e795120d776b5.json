{"ast":null,"code":"import { sum, max, min } from '@antv/vendor/d3-array';\nimport { justify } from './align';\nimport { constant } from './constant';\nfunction ascendingSourceBreadth(a, b) {\n  return ascendingBreadth(a.source, b.source) || a.index - b.index;\n}\nfunction ascendingTargetBreadth(a, b) {\n  return ascendingBreadth(a.target, b.target) || a.index - b.index;\n}\nfunction ascendingBreadth(a, b) {\n  return a.y0 - b.y0;\n}\nfunction value(d) {\n  return d.value;\n}\nfunction defaultId(d) {\n  return d.index;\n}\nfunction defaultNodes(graph) {\n  return graph.nodes;\n}\nfunction defaultLinks(graph) {\n  return graph.links;\n}\nfunction find(nodeById, id) {\n  const node = nodeById.get(id);\n  if (!node) throw new Error('missing: ' + id);\n  return node;\n}\nfunction computeLinkBreadths(_ref) {\n  let {\n    nodes\n  } = _ref;\n  for (const node of nodes) {\n    let y0 = node.y0;\n    let y1 = y0;\n    for (const link of node.sourceLinks) {\n      link.y0 = y0 + link.width / 2;\n      y0 += link.width;\n    }\n    for (const link of node.targetLinks) {\n      link.y1 = y1 + link.width / 2;\n      y1 += link.width;\n    }\n  }\n}\nexport function Sankey() {\n  let x0 = 0,\n    y0 = 0,\n    x1 = 1,\n    y1 = 1; // extent\n  let dx = 24; // nodeWidth\n  let dy = 8,\n    py; // nodePadding\n  let id = defaultId;\n  let align = justify;\n  let depth;\n  let sort;\n  let linkSort;\n  let nodes = defaultNodes;\n  let links = defaultLinks;\n  let iterations = 6;\n  function sankey(arg) {\n    const graph = {\n      nodes: nodes(arg),\n      links: links(arg)\n    };\n    computeNodeLinks(graph);\n    computeNodeValues(graph);\n    computeNodeDepths(graph);\n    computeNodeHeights(graph);\n    computeNodeBreadths(graph);\n    computeLinkBreadths(graph);\n    return graph;\n  }\n  sankey.update = function (graph) {\n    computeLinkBreadths(graph);\n    return graph;\n  };\n  sankey.nodeId = function (_) {\n    return arguments.length ? (id = typeof _ === 'function' ? _ : constant(_), sankey) : id;\n  };\n  sankey.nodeAlign = function (_) {\n    return arguments.length ? (align = typeof _ === 'function' ? _ : constant(_), sankey) : align;\n  };\n  sankey.nodeDepth = function (_) {\n    return arguments.length ? (depth = typeof _ === 'function' ? _ : _, sankey) : depth;\n  };\n  sankey.nodeSort = function (_) {\n    return arguments.length ? (sort = _, sankey) : sort;\n  };\n  sankey.nodeWidth = function (_) {\n    return arguments.length ? (dx = +_, sankey) : dx;\n  };\n  sankey.nodePadding = function (_) {\n    return arguments.length ? (dy = py = +_, sankey) : dy;\n  };\n  sankey.nodes = function (_) {\n    return arguments.length ? (nodes = typeof _ === 'function' ? _ : constant(_), sankey) : nodes;\n  };\n  sankey.links = function (_) {\n    return arguments.length ? (links = typeof _ === 'function' ? _ : constant(_), sankey) : links;\n  };\n  sankey.linkSort = function (_) {\n    return arguments.length ? (linkSort = _, sankey) : linkSort;\n  };\n  sankey.size = function (_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], sankey) : [x1 - x0, y1 - y0];\n  };\n  sankey.extent = function (_) {\n    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], sankey) : [[x0, y0], [x1, y1]];\n  };\n  sankey.iterations = function (_) {\n    return arguments.length ? (iterations = +_, sankey) : iterations;\n  };\n  function computeNodeLinks(_ref2) {\n    let {\n      nodes,\n      links\n    } = _ref2;\n    nodes.forEach((node, idx) => {\n      node.index = idx;\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    });\n    const nodeById = new Map(nodes.map(d => [id(d), d]));\n    links.forEach((link, idx) => {\n      link.index = idx;\n      let {\n        source,\n        target\n      } = link;\n      if (typeof source !== 'object') source = link.source = find(nodeById, source);\n      if (typeof target !== 'object') target = link.target = find(nodeById, target);\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    });\n    if (linkSort != null) {\n      for (const {\n        sourceLinks,\n        targetLinks\n      } of nodes) {\n        sourceLinks.sort(linkSort);\n        targetLinks.sort(linkSort);\n      }\n    }\n  }\n  function computeNodeValues(_ref3) {\n    let {\n      nodes\n    } = _ref3;\n    for (const node of nodes) {\n      node.value = node.fixedValue === undefined ? Math.max(sum(node.sourceLinks, value), sum(node.targetLinks, value)) : node.fixedValue;\n    }\n  }\n  function computeNodeDepths(_ref4) {\n    let {\n      nodes\n    } = _ref4;\n    const n = nodes.length;\n    let current = new Set(nodes);\n    let next = new Set();\n    let x = 0;\n    while (current.size) {\n      current.forEach(node => {\n        node.depth = x;\n        for (const {\n          target\n        } of node.sourceLinks) {\n          next.add(target);\n        }\n      });\n      if (++x > n) throw new Error('circular link');\n      current = next;\n      next = new Set();\n    }\n    // 如果配置了 depth，则设置自定义 depth\n    if (depth) {\n      const maxDepth = Math.max(max(nodes, d => d.depth) + 1, 0);\n      let node;\n      for (let i = 0; i < nodes.length; i++) {\n        node = nodes[i];\n        node.depth = depth.call(null, node, maxDepth);\n      }\n    }\n  }\n  function computeNodeHeights(_ref5) {\n    let {\n      nodes\n    } = _ref5;\n    const n = nodes.length;\n    let current = new Set(nodes);\n    let next = new Set();\n    let x = 0;\n    while (current.size) {\n      current.forEach(node => {\n        node.height = x;\n        for (const {\n          source\n        } of node.targetLinks) {\n          next.add(source);\n        }\n      });\n      if (++x > n) throw new Error('circular link');\n      current = next;\n      next = new Set();\n    }\n  }\n  function computeNodeLayers(_ref6) {\n    let {\n      nodes\n    } = _ref6;\n    const x = Math.max(max(nodes, d => d.depth) + 1, 0);\n    const kx = (x1 - x0 - dx) / (x - 1);\n    const columns = new Array(x).fill(0).map(() => []);\n    for (const node of nodes) {\n      const i = Math.max(0, Math.min(x - 1, Math.floor(align.call(null, node, x))));\n      node.layer = i;\n      node.x0 = x0 + i * kx;\n      node.x1 = node.x0 + dx;\n      if (columns[i]) columns[i].push(node);else columns[i] = [node];\n    }\n    if (sort) for (const column of columns) {\n      column.sort(sort);\n    }\n    return columns;\n  }\n  function initializeNodeBreadths(columns) {\n    const ky = min(columns, c => (y1 - y0 - (c.length - 1) * py) / sum(c, value));\n    for (const nodes of columns) {\n      let y = y0;\n      for (const node of nodes) {\n        node.y0 = y;\n        node.y1 = y + node.value * ky;\n        y = node.y1 + py;\n        for (const link of node.sourceLinks) {\n          link.width = link.value * ky;\n        }\n      }\n      y = (y1 - y + py) / (nodes.length + 1);\n      for (let i = 0; i < nodes.length; ++i) {\n        const node = nodes[i];\n        node.y0 += y * (i + 1);\n        node.y1 += y * (i + 1);\n      }\n      reorderLinks(nodes);\n    }\n  }\n  function computeNodeBreadths(graph) {\n    const columns = computeNodeLayers(graph);\n    py = Math.min(dy, (y1 - y0) / (max(columns, c => c.length) - 1));\n    initializeNodeBreadths(columns);\n    for (let i = 0; i < iterations; ++i) {\n      const alpha = Math.pow(0.99, i);\n      const beta = Math.max(1 - alpha, (i + 1) / iterations);\n      relaxRightToLeft(columns, alpha, beta);\n      relaxLeftToRight(columns, alpha, beta);\n    }\n  }\n  // Reposition each node based on its incoming (target) links.\n  function relaxLeftToRight(columns, alpha, beta) {\n    for (let i = 1, n = columns.length; i < n; ++i) {\n      const column = columns[i];\n      for (const target of column) {\n        let y = 0;\n        let w = 0;\n        for (const {\n          source,\n          value\n        } of target.targetLinks) {\n          const v = value * (target.layer - source.layer);\n          y += targetTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        const dy = (y / w - target.y0) * alpha;\n        target.y0 += dy;\n        target.y1 += dy;\n        reorderNodeLinks(target);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      if (column.length) resolveCollisions(column, beta);\n    }\n  }\n  // Reposition each node based on its outgoing (source) links.\n  function relaxRightToLeft(columns, alpha, beta) {\n    for (let n = columns.length, i = n - 2; i >= 0; --i) {\n      const column = columns[i];\n      for (const source of column) {\n        let y = 0;\n        let w = 0;\n        for (const {\n          target,\n          value\n        } of source.sourceLinks) {\n          const v = value * (target.layer - source.layer);\n          y += sourceTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        const dy = (y / w - source.y0) * alpha;\n        source.y0 += dy;\n        source.y1 += dy;\n        reorderNodeLinks(source);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      if (column.length) resolveCollisions(column, beta);\n    }\n  }\n  function resolveCollisions(nodes, alpha) {\n    const i = nodes.length >> 1;\n    const subject = nodes[i];\n    resolveCollisionsBottomToTop(nodes, subject.y0 - py, i - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, subject.y1 + py, i + 1, alpha);\n    resolveCollisionsBottomToTop(nodes, y1, nodes.length - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, y0, 0, alpha);\n  }\n  // Push any overlapping nodes down.\n  function resolveCollisionsTopToBottom(nodes, y, i, alpha) {\n    for (; i < nodes.length; ++i) {\n      const node = nodes[i];\n      const dy = (y - node.y0) * alpha;\n      if (dy > 1e-6) node.y0 += dy, node.y1 += dy;\n      y = node.y1 + py;\n    }\n  }\n  // Push any overlapping nodes up.\n  function resolveCollisionsBottomToTop(nodes, y, i, alpha) {\n    for (; i >= 0; --i) {\n      const node = nodes[i];\n      const dy = (node.y1 - y) * alpha;\n      if (dy > 1e-6) node.y0 -= dy, node.y1 -= dy;\n      y = node.y0 - py;\n    }\n  }\n  function reorderNodeLinks(_ref7) {\n    let {\n      sourceLinks,\n      targetLinks\n    } = _ref7;\n    if (linkSort === undefined) {\n      for (const {\n        source: {\n          sourceLinks\n        }\n      } of targetLinks) {\n        sourceLinks.sort(ascendingTargetBreadth);\n      }\n      for (const {\n        target: {\n          targetLinks\n        }\n      } of sourceLinks) {\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n  function reorderLinks(nodes) {\n    if (linkSort === undefined) {\n      for (const {\n        sourceLinks,\n        targetLinks\n      } of nodes) {\n        sourceLinks.sort(ascendingTargetBreadth);\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n  // Returns the target.y0 that would produce an ideal link from source to target.\n  function targetTop(source, target) {\n    let y = source.y0 - (source.sourceLinks.length - 1) * py / 2;\n    for (const {\n      target: node,\n      width\n    } of source.sourceLinks) {\n      if (node === target) break;\n      y += width + py;\n    }\n    for (const {\n      source: node,\n      width\n    } of target.targetLinks) {\n      if (node === source) break;\n      y -= width;\n    }\n    return y;\n  }\n  // Returns the source.y0 that would produce an ideal link from source to target.\n  function sourceTop(source, target) {\n    let y = target.y0 - (target.targetLinks.length - 1) * py / 2;\n    for (const {\n      source: node,\n      width\n    } of target.targetLinks) {\n      if (node === source) break;\n      y += width + py;\n    }\n    for (const {\n      target: node,\n      width\n    } of source.sourceLinks) {\n      if (node === target) break;\n      y -= width;\n    }\n    return y;\n  }\n  return sankey;\n}","map":{"version":3,"names":["sum","max","min","justify","constant","ascendingSourceBreadth","a","b","ascendingBreadth","source","index","ascendingTargetBreadth","target","y0","value","d","defaultId","defaultNodes","graph","nodes","defaultLinks","links","find","nodeById","id","node","get","Error","computeLinkBreadths","_ref","y1","link","sourceLinks","width","targetLinks","Sankey","x0","x1","dx","dy","py","align","depth","sort","linkSort","iterations","sankey","arg","computeNodeLinks","computeNodeValues","computeNodeDepths","computeNodeHeights","computeNodeBreadths","update","nodeId","_","arguments","length","nodeAlign","nodeDepth","nodeSort","nodeWidth","nodePadding","size","extent","_ref2","forEach","idx","Map","map","push","_ref3","fixedValue","undefined","Math","_ref4","n","current","Set","next","x","add","maxDepth","i","call","_ref5","height","computeNodeLayers","_ref6","kx","columns","Array","fill","floor","layer","column","initializeNodeBreadths","ky","c","y","reorderLinks","alpha","pow","beta","relaxRightToLeft","relaxLeftToRight","w","v","targetTop","reorderNodeLinks","resolveCollisions","sourceTop","subject","resolveCollisionsBottomToTop","resolveCollisionsTopToBottom","_ref7"],"sources":["data/utils/d3-sankey/sankey.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}