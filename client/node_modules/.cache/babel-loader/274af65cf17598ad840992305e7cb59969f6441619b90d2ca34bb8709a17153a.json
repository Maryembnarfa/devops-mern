{"ast":null,"code":"import { PolygonShape, PolygonRibbon } from '../shape';\nimport { baseGeometryChannels, basePostInference, basePreInference, tooltip2d } from './utils';\nconst shape = {\n  polygon: PolygonShape,\n  ribbon: PolygonRibbon\n};\n/**\n * Convert value for each channel to polygon shapes.\n */\nexport const Polygon = () => {\n  return (index, scale, value, coordinate) => {\n    const Xn = Object.entries(value).filter(_ref => {\n      let [key] = _ref;\n      return key.startsWith('x');\n    }).map(_ref2 => {\n      let [, value] = _ref2;\n      return value;\n    });\n    const Yn = Object.entries(value).filter(_ref3 => {\n      let [key] = _ref3;\n      return key.startsWith('y');\n    }).map(_ref4 => {\n      let [, value] = _ref4;\n      return value;\n    });\n    const P = index.map(i => {\n      const Pn = [];\n      for (let j = 0; j < Xn.length; j++) {\n        const x = Xn[j][i];\n        if (x === undefined) break;\n        const y = Yn[j][i];\n        Pn.push(coordinate.map([+x, +y]));\n      }\n      return Pn;\n    });\n    return [index, P];\n  };\n};\nPolygon.props = {\n  defaultShape: 'polygon',\n  defaultLabelShape: 'label',\n  composite: false,\n  shape,\n  channels: [...baseGeometryChannels({\n    shapes: Object.keys(shape)\n  }), {\n    name: 'x',\n    required: true\n  }, {\n    name: 'y',\n    required: true\n  }],\n  preInference: [...basePreInference()],\n  postInference: [...basePostInference(), ...tooltip2d()]\n};","map":{"version":3,"names":["PolygonShape","PolygonRibbon","baseGeometryChannels","basePostInference","basePreInference","tooltip2d","shape","polygon","ribbon","Polygon","index","scale","value","coordinate","Xn","Object","entries","filter","_ref","key","startsWith","map","_ref2","Yn","_ref3","_ref4","P","i","Pn","j","length","x","undefined","y","push","props","defaultShape","defaultLabelShape","composite","channels","shapes","keys","name","required","preInference","postInference"],"sources":["mark/polygon.ts"],"sourcesContent":[null],"mappings":"AAEA,SAASA,YAAY,EAAEC,aAAa,QAAQ,UAAU;AACtD,SACEC,oBAAoB,EACpBC,iBAAiB,EACjBC,gBAAgB,EAChBC,SAAS,QACJ,SAAS;AAEhB,MAAMC,KAAK,GAAG;EACZC,OAAO,EAAEP,YAAY;EACrBQ,MAAM,EAAEP;CACT;AAID;;;AAGA,OAAO,MAAMQ,OAAO,GAAuBA,CAAA,KAAK;EAC9C,OAAO,CAACC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,UAAU,KAAI;IACzC,MAAMC,EAAE,GAAGC,MAAM,CAACC,OAAO,CAACJ,KAAK,CAAC,CAC7BK,MAAM,CAACC,IAAA;MAAA,IAAC,CAACC,GAAG,CAAC,GAAAD,IAAA;MAAA,OAAKC,GAAG,CAACC,UAAU,CAAC,GAAG,CAAC;IAAA,EAAC,CACtCC,GAAG,CAACC,KAAA;MAAA,IAAC,GAAGV,KAAK,CAAC,GAAAU,KAAA;MAAA,OAAKV,KAAK;IAAA,EAAC;IAE5B,MAAMW,EAAE,GAAGR,MAAM,CAACC,OAAO,CAACJ,KAAK,CAAC,CAC7BK,MAAM,CAACO,KAAA;MAAA,IAAC,CAACL,GAAG,CAAC,GAAAK,KAAA;MAAA,OAAKL,GAAG,CAACC,UAAU,CAAC,GAAG,CAAC;IAAA,EAAC,CACtCC,GAAG,CAACI,KAAA;MAAA,IAAC,GAAGb,KAAK,CAAC,GAAAa,KAAA;MAAA,OAAKb,KAAK;IAAA,EAAC;IAE5B,MAAMc,CAAC,GAAGhB,KAAK,CAACW,GAAG,CAAEM,CAAC,IAAI;MACxB,MAAMC,EAAE,GAAG,EAAE;MACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGf,EAAE,CAACgB,MAAM,EAAED,CAAC,EAAE,EAAE;QAClC,MAAME,CAAC,GAAGjB,EAAE,CAACe,CAAC,CAAC,CAACF,CAAC,CAAC;QAClB,IAAII,CAAC,KAAKC,SAAS,EAAE;QACrB,MAAMC,CAAC,GAAGV,EAAE,CAACM,CAAC,CAAC,CAACF,CAAC,CAAC;QAClBC,EAAE,CAACM,IAAI,CAACrB,UAAU,CAACQ,GAAG,CAAC,CAAC,CAACU,CAAC,EAAE,CAACE,CAAC,CAAC,CAAC,CAAC;;MAEnC,OAAOL,EAAe;IACxB,CAAC,CAAC;IAEF,OAAO,CAAClB,KAAK,EAAEgB,CAAC,CAAC;EACnB,CAAC;AACH,CAAC;AAEDjB,OAAO,CAAC0B,KAAK,GAAG;EACdC,YAAY,EAAE,SAAS;EACvBC,iBAAiB,EAAE,OAAO;EAC1BC,SAAS,EAAE,KAAK;EAChBhC,KAAK;EACLiC,QAAQ,EAAE,CACR,GAAGrC,oBAAoB,CAAC;IAAEsC,MAAM,EAAEzB,MAAM,CAAC0B,IAAI,CAACnC,KAAK;EAAC,CAAE,CAAC,EACvD;IAAEoC,IAAI,EAAE,GAAG;IAAEC,QAAQ,EAAE;EAAI,CAAE,EAC7B;IAAED,IAAI,EAAE,GAAG;IAAEC,QAAQ,EAAE;EAAI,CAAE,CAC9B;EACDC,YAAY,EAAE,CAAC,GAAGxC,gBAAgB,EAAE,CAAC;EACrCyC,aAAa,EAAE,CAAC,GAAG1C,iBAAiB,EAAE,EAAE,GAAGE,SAAS,EAAE;CACvD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}